(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"/94A":function(e){e.exports=JSON.parse('{"root":["index","setup"],"References":{"Community articles":"/community/articles","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"Server":["server-basics","server-decorator","server-grpc","server-thrift","server-docservice","server-annotated-service","server-http-file","server-servlet","server-access-log","server-cors","server-sse"],"Client":["client-http","client-thrift","client-grpc","client-decorator","client-retrofit","client-custom-http-headers","client-timeouts","client-retry","client-circuit-breaker","client-service-discovery"],"Advanced":["advanced-logging","advanced-structured-logging","advanced-custom-attributes","advanced-structured-logging-kafka","advanced-unit-testing","advanced-production-checklist","advanced-zipkin","advanced-zookeeper","advanced-saml","advanced-spring-webflux-integration","advanced-dropwizard-integration"]}')},"6CiC":function(e,t,n){"use strict";n.r(t),n.d(t,"pageTitle",(function(){return s})),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return g}));n("8x/H"),n("UsjJ"),n("tKM+"),n("q1tI");var a=n("7ljp"),i=n("xCMr"),r=n("aRgT");var s="SAML Single Sign-On",o={},c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",t)}},l=c("Tip"),d=c("Tabs"),m=c("TabPane"),p=c("CodeBlock"),u=c("Warning"),b={pageTitle:s,_frontmatter:o},h=i.a;function g(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(h,Object.assign({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"saml-single-sign-on",style:{position:"relative"}},Object(a.b)("a",Object.assign({parentName:"h1"},{href:"#saml-single-sign-on","aria-label":"saml single sign on permalink",className:"anchor before"}),Object(a.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(a.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"SAML Single Sign-On"),Object(a.b)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"#what-is-saml"}),"What is SAML?")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"#configuring-your-server-as-a-service-provider"}),"Configuring your server as a service provider")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"#how-to-handle-the-authentication-response"}),"How to handle the authentication response")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"#what-services-are-automatically-configured"}),"What services are automatically configured"))),Object(a.b)(l,{mdxType:"Tip"},Object(a.b)("p",null,"Visit ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/line/armeria-examples"}),"armeria-examples")," to find a fully working example.")),Object(a.b)("h2",{id:"what-is-saml",style:{position:"relative"}},Object(a.b)("a",Object.assign({parentName:"h2"},{href:"#what-is-saml","aria-label":"what is saml permalink",className:"anchor before"}),Object(a.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(a.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"What is SAML?"),Object(a.b)("p",null,Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language"}),"Security Assertion Markup Language (SAML)"),"\nis an open standard for exchanging authentication and authorization data between an identity provider and\na service provider. In this protocol, a service provider is an endpoint which provides a web service to\nan end user, and an identity provider is in charge of authenticating an end user with information sent by\nthe service provider.\nArmeria currently provides ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://wiki.shibboleth.net/confluence/display/OS30/Home"}),"OpenSAML")," based\n",Object(a.b)("inlineCode",{parentName:"p"},"armeria-saml")," module in order to support the integration with an identity provider from a service\nprovider's point of view."),Object(a.b)("h2",{id:"configuring-your-server-as-a-service-provider",style:{position:"relative"}},Object(a.b)("a",Object.assign({parentName:"h2"},{href:"#configuring-your-server-as-a-service-provider","aria-label":"configuring your server as a service provider permalink",className:"anchor before"}),Object(a.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(a.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Configuring your server as a service provider"),Object(a.b)("p",null,"The first step to configure a service provider is adding ",Object(a.b)("inlineCode",{parentName:"p"},"armeria-saml")," to your dependencies."),Object(a.b)(d,{mdxType:"Tabs"},Object(a.b)(m,{tab:"Gradle",key:"gradle",mdxType:"TabPane"},Object(a.b)(p,{language:"groovy",mdxType:"CodeBlock"},"\n    dependencies {\n        compile 'com.linecorp.armeria:saml:"+r["com.linecorp.armeria:armeria-bom"]+"'\n    }\n    ")),Object(a.b)(m,{tab:"Maven",key:"maven",mdxType:"TabPane"},Object(a.b)(p,{language:"xml",mdxType:"CodeBlock"},"\n    <dependency>\n        <groupId>com.linecorp.armeria</groupId>\n        <artifactId>saml</artifactId>\n        <version>"+r["com.linecorp.armeria:armeria-bom"]+"</version>\n    </dependency>\n    "))),Object(a.b)("p",null,"After that, you need to prepare your keystore file which contains a key pair for signing and encryption\nof a SAML message. Also, you need to import the certificate of your identity provider into the keystore\nwhich contains your key pairs. In this example, we are using a free identity provider service hosted by\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://www.ssocircle.com/en/"}),"SSOCircle")," in order to authenticate an end user. The following commands\nmay help you to get a keystore."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"# Generate new key pairs as alias 'signing' and 'encryption'.\nkeytool -genkeypair -keystore sample.jks -storepass 'N5^X[hvG' -keyalg rsa -sigalg sha1withrsa \\\n  -dname 'CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown' -alias signing\nkeytool -genkeypair -keystore sample.jks -storepass 'N5^X[hvG' -keyalg rsa -sigalg sha1withrsa \\\n  -dname 'CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown' -alias encryption\n\n# Import a certificate into the keystore as alias 'https://idp.ssocircle.com', which is the entity ID\n# of the SSOCircle. You can make 'ssocircle.crt' file with the certificate from\n# 'https://www.ssocircle.com/en/idp-tips-tricks/public-idp-configuration/'.\nkeytool -importcert -keystore sample.jks -storepass 'N5^X[hvG' -file ssocircle.crt \\\n  -alias 'https://idp.ssocircle.com'\n")),Object(a.b)("p",null,"Finally, you need to create your ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://SamlServiceProvider:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/saml/SamlServiceProvider.html"}),"type://SamlServiceProvider")," with a ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://SamlServiceProviderBuilder:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/saml/SamlServiceProviderBuilder.html"}),"type://SamlServiceProviderBuilder"),", and\nattach it to your ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://Server:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/Server.html"}),"type://Server"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'// Specify information about your keystore.\n// The keystore contains two key pairs, which are identified as \'signing\' and \'encryption\'.\nKeyStoreCredentialResolver credentialResolver =\n        new KeyStoreCredentialResolverBuilder(ClassLoader.getSystemClassLoader(),\n                                              "sample.jks")\n                .type("PKCS12")\n                .password("N5^X[hvG")\n                // You need to specify your key pair and its password here.\n                .addKeyPassword("signing", "N5^X[hvG")\n                .addKeyPassword("encryption", "N5^X[hvG")\n                .build();\n\nSamlServiceProvider ssp =\n        SamlServiceProvider.builder()\n                           .credentialResolver(credentialResolver)\n                           // Specify the entity ID of this service provider.\n                           // You can specify what you want.\n                           .entityId("your-sp-id")\n                           .hostname("your-service-domain-name")\n                           // Specify an authorizer in order to authenticate a request.\n                           .authorizer(new Authorizer<HttpRequest>() { ... })\n                           // Speicify an SAML single sign-on handler\n                           // which sends a response to an end user\n                           // after he or she is authenticated or not.\n                           .ssoHandler(new SamlSingleSignOnHandler() { ... })\n                           // Specify the signature algorithm of your key.\n                           .signatureAlgorithm(SignatureConstants.ALGO_ID_SIGNATURE_RSA)\n                           .idp()\n                           // Specify the entity ID of the identity provider.\n                           // It can be found from the metadata of the identity provider.\n                           .entityId("https://idp.ssocircle.com")\n                           // Specify the endpoint that is supposed to send an authentication request.\n                           .ssoEndpoint(\n                               ofHttpPost("https://idp.ssocircle.com:443/sso/SSOPOST/metaAlias/publicidp"))\n                           .and()\n                           .build();\n\nServer server = Server.builder()\n                      .https(8443)\n                      // Configure TLS with your key and certificate.\n                      .tls(new File("your-certificate-file-path"), new File("your-key-file-path"))\n                      // Decorate you service with SAML decorator.\n                      .annotatedService("/", new MyService(), ssp.newSamlDecorator())\n                      // Add SAML service to your server which handles a SAML response and a metadata request.\n                      .service(ssp.newSamlService())\n                      .build();\n')),Object(a.b)("h2",{id:"how-to-handle-the-authentication-response",style:{position:"relative"}},Object(a.b)("a",Object.assign({parentName:"h2"},{href:"#how-to-handle-the-authentication-response","aria-label":"how to handle the authentication response permalink",className:"anchor before"}),Object(a.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(a.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"How to handle the authentication response"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"armeria-saml")," provides ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://SamlSingleSignOnHandler:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/saml/SamlSingleSignOnHandler.html"}),"type://SamlSingleSignOnHandler")," to handle the response from an identity provider.\nIt consists of ",Object(a.b)("inlineCode",{parentName:"p"},"loginSucceeded()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"loginFailed()")," methods which handle the response,\nand ",Object(a.b)("inlineCode",{parentName:"p"},"beforeInitiatingSso()")," which handles a request. In most cases, you only need to write the two methods\nwhich handle the response, but if you want to send data to your identity provider and get it back\nwith a response, you need to implement ",Object(a.b)("inlineCode",{parentName:"p"},"beforeInitiatingSso()")," method."),Object(a.b)("p",null,"The following example shows a simple implementation of the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://SamlSingleSignOnHandler:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/saml/SamlSingleSignOnHandler.html"}),"type://SamlSingleSignOnHandler"),". In this example,\nif an authentication is succeeded, an email address is retrieved from the response by referring to a ",Object(a.b)("inlineCode",{parentName:"p"},"name ID"),"\nelement in the assertion, then it is sent to the end user via ",Object(a.b)("inlineCode",{parentName:"p"},"Set-Cookie")," header. It means that your\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://Authorizer:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/auth/Authorizer.html"}),"type://Authorizer")," can identify an authenticated session with a ",Object(a.b)("inlineCode",{parentName:"p"},"Cookie")," header in the following requests,\nlike ",Object(a.b)("inlineCode",{parentName:"p"},"MyAuthorizer")," in this example."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'class MySamlSingleSignOnHandler implements SamlSingleSignOnHandler {\n    @Override\n    public HttpResponse loginSucceeded(ServiceRequestContext ctx, AggregatedHttpRequest req,\n                                       MessageContext<Response> message, @Nullable String sessionIndex,\n                                       @Nullable String relayState) {\n        final Response response = message.getMessage();\n        final String username = response.getAssertions().stream()\n                                        .map(s -> s.getSubject().getNameID())\n                                        .filter(id -> id.getFormat().equals(SamlNameIdFormat.EMAIL.urn()))\n                                        .map(NameIDType::getValue)\n                                        .findFirst()\n                                        .orElse(null);\n        if (username == null) {\n            return HttpResponse.of(HttpStatus.UNAUTHORIZED, MediaType.HTML_UTF_8,\n                                   "<html><body>Username is not found.</body></html>");\n        }\n\n        // Note that you MUST NOT use this example in a real world application. You may consider encoding\n        // the value using JSON Web Tokens to prevent tempering.\n        final Cookie cookie = Cookie.builder("username", username)\n                                    .httpOnly(true)\n                                    .domain("localhost")\n                                    .maxAge(60)\n                                    .path("/")\n                                    .build();\n        return HttpResponse.of(\n                ResponseHeaders,of(HttpStatus.OK,\n                                   HttpHeaderNames.CONTENT_TYPE, MediaType.HTML_UTF_8,\n                                   HttpHeaderNames.SET_COOKIE, cookie.toSetCookieHeader()),\n                HttpData.ofUtf8("<html><body onLoad=\\"window.location.href=\'/welcome\'\\"></body></html>"));\n    }\n\n    @Override\n    public HttpResponse loginFailed(ServiceRequestContext ctx, AggregatedHttpRequest req,\n                                    @Nullable MessageContext<Response> message, Throwable cause) {\n        return HttpResponse.of(HttpStatus.UNAUTHORIZED, MediaType.HTML_UTF_8,\n                               "<html><body>Login failed.</body></html>");\n    }\n}\n\nclass MyAuthorizer implements Authorizer<HttpRequest> {\n    @Override\n    public CompletionStage<Boolean> authorize(ServiceRequestContext ctx, HttpRequest data) {\n        // Note that you MUST NOT use this example in a real world application. You have to perform\n        // proper validation in your application.\n        final String cookie = data.headers().get(HttpHeaderNames.COOKIE);\n        if (cookie == null) {\n            return CompletableFuture.completedFuture(false);\n        }\n\n        final boolean authenticated = Cookie.fromCookieHeader(cookie).stream().anyMatch(\n                c -> "username".equals(c.name()) && !Strings.isNullOrEmpty(c.value()));\n        return CompletableFuture.completedFuture(authenticated);\n    }\n}\n')),Object(a.b)(u,{mdxType:"Warning"},Object(a.b)("p",null,"The above implementation is just an example that shows you how to handle the response, so it is recommended\nthat you write your own ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://SamlSingleSignOnHandler:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/saml/SamlSingleSignOnHandler.html"}),"type://SamlSingleSignOnHandler")," according to your authentication system.")),Object(a.b)("h2",{id:"what-services-are-automatically-configured",style:{position:"relative"}},Object(a.b)("a",Object.assign({parentName:"h2"},{href:"#what-services-are-automatically-configured","aria-label":"what services are automatically configured permalink",className:"anchor before"}),Object(a.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(a.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"What services are automatically configured"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"armeria-saml")," module automatically adds SAML services to your server with the following default paths:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"/saml/acs/post")," and ",Object(a.b)("inlineCode",{parentName:"li"},"/saml/acs/redirect"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"SAML assertion consumer services for HTTP Post binding and HTTP Redirect binding. These services are invoked\nby an identity provider when it responds to an authentication request received from your service."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"/saml/slo/post")," and ",Object(a.b)("inlineCode",{parentName:"li"},"/saml/slo/redirect"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"SAML single logout services for HTTP Post binding and HTTP Redirect binding. These services may be invoked\nby an identity provider when it performs global logout."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"/saml/metadata"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"SAML metadata service. In the metadata, the endpoints for assertion consumer services and single logout\nservices are specified by ",Object(a.b)("inlineCode",{parentName:"li"},"md:AssertionConsumerService")," and ",Object(a.b)("inlineCode",{parentName:"li"},"md:SingleLogoutService")," elements\nrespectively. The certificates of the ",Object(a.b)("inlineCode",{parentName:"li"},"signing")," and ",Object(a.b)("inlineCode",{parentName:"li"},"encryption")," key pair are also included.")))),Object(a.b)(l,{mdxType:"Tip"},Object(a.b)("p",null,"In order for your service to act as a service provider, you need to register your service to your identity\nprovider, and providing your metadata is the easiest way to do that. You can get your metadata from\n",Object(a.b)("inlineCode",{parentName:"p"},"https://your-service-domain-name:your-service-port/saml/metadata"),".")))}g.isMDXComponent=!0},AMUl:function(e){e.exports=JSON.parse('{"data":{"allMdx":{"nodes":[{"tableOfContents":{"items":[{"url":"#requestcontext-custom-attributes","title":"RequestContext custom attributes"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-custom-attributes"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-dropwizard","title":"Using Armeria with Dropwizard"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-dropwizard-integration"}},{"tableOfContents":{"items":[{"url":"#production-checklist","title":"Production checklist"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-production-checklist"}},{"tableOfContents":{"items":[{"url":"#logging-contextual-information","title":"Logging contextual information"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-logging"}},{"tableOfContents":{"items":[{"url":"#saml-single-sign-on","title":"SAML Single Sign-On"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-saml"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-spring-webflux","title":"Using Armeria with Spring WebFlux"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-spring-webflux-integration"}},{"tableOfContents":{"items":[{"url":"#structured-logging","title":"Structured logging"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging"}},{"tableOfContents":{"items":[{"url":"#unit-testing-client-and-service","title":"Unit-testing Client and Service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-unit-testing"}},{"tableOfContents":{"items":[{"url":"#zipkin-integration","title":"Zipkin integration"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zipkin"}},{"tableOfContents":{"items":[{"url":"#service-discovery-with-zookeeper","title":"Service discovery with ZooKeeper"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zookeeper"}},{"tableOfContents":{"items":[{"url":"#structured-logging-with-kafka","title":"Structured logging with Kafka"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging-kafka"}},{"tableOfContents":{"items":[{"url":"#sending-custom-http-headers","title":"Sending custom HTTP headers"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-custom-http-headers"}},{"tableOfContents":{"items":[{"url":"#decorating-a-client","title":"Decorating a client"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-decorator"}},{"tableOfContents":{"items":[{"url":"#circuit-breaker","title":"Circuit breaker"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-circuit-breaker"}},{"tableOfContents":{"items":[{"url":"#calling-a-grpc-service","title":"Calling a gRPC service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-grpc"}},{"tableOfContents":{"items":[{"url":"#retrofit-integration","title":"Retrofit integration"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retrofit"}},{"tableOfContents":{"items":[{"url":"#calling-an-http-service","title":"Calling an HTTP service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-http"}},{"tableOfContents":{"items":[{"url":"#automatic-retry","title":"Automatic retry"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retry"}},{"tableOfContents":{"items":[{"url":"#client-side-load-balancing-and-service-discovery","title":"Client-side load balancing and service discovery"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-service-discovery"}},{"tableOfContents":{"items":[{"url":"#calling-a-thrift-service","title":"Calling a Thrift service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-thrift"}},{"tableOfContents":{"items":[{"url":"#overriding-client-timeouts","title":"Overriding client timeouts"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-timeouts"}},{"tableOfContents":{"items":[{"url":"#writing-an-access-log","title":"Writing an access log"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-access-log"}},{"tableOfContents":{"items":[{"url":"#user-manual","title":"User manual"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"index"}},{"tableOfContents":{"items":[{"url":"#annotated-services","title":"Annotated services"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-annotated-service"}},{"tableOfContents":{"items":[{"url":"#server-basics","title":"Server basics"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-basics"}},{"tableOfContents":{"items":[{"url":"#configuring-cors","title":"Configuring CORS"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-cors"}},{"tableOfContents":{"items":[{"url":"#decorating-a-service","title":"Decorating a service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-decorator"}},{"tableOfContents":{"items":[{"url":"#browsing-and-invoking-services-with-docservice","title":"Browsing and invoking services with DocService"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-docservice"}},{"tableOfContents":{"items":[{"url":"#running-a-grpc-service","title":"Running a gRPC service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-grpc"}},{"tableOfContents":{"items":[{"url":"#serving-static-files","title":"Serving static files"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-http-file"}},{"tableOfContents":{"items":[{"url":"#embedding-a-servlet-container","title":"Embedding a servlet container"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-servlet"}},{"tableOfContents":{"items":[{"url":"#serving-server-sent-events","title":"Serving Server-Sent Events"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-sse"}},{"tableOfContents":{"items":[{"url":"#running-a-thrift-service","title":"Running a Thrift service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-thrift"}},{"tableOfContents":{"items":[{"url":"#setting-up-a-project","title":"Setting up a project"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"setup"}}]}}}')},xCMr:function(e,t,n){"use strict";n("UsjJ");var a=n("AMUl"),i=n("q1tI"),r=n.n(i),s=n("/94A"),o=n("+ejy");t.a=function(e){var t=a.data.allMdx.nodes;return r.a.createElement(o.a,Object.assign({},e,{candidateMdxNodes:t,index:s,prefix:"docs",pageTitleSuffix:"Armeria documentation"}))}}}]);
//# sourceMappingURL=component---src-pages-docs-advanced-saml-mdx-cb655fa81512cd8f1986.js.map