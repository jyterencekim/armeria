(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{"/94A":function(e){e.exports=JSON.parse('{"root":["index","setup"],"References":{"Community articles":"/community/articles","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"Server":["server-basics","server-decorator","server-grpc","server-thrift","server-docservice","server-annotated-service","server-http-file","server-servlet","server-access-log","server-cors","server-sse"],"Client":["client-http","client-thrift","client-grpc","client-decorator","client-retrofit","client-custom-http-headers","client-timeouts","client-retry","client-circuit-breaker","client-service-discovery"],"Advanced":["advanced-logging","advanced-structured-logging","advanced-custom-attributes","advanced-structured-logging-kafka","advanced-unit-testing","advanced-production-checklist","advanced-zipkin","advanced-zookeeper","advanced-saml","advanced-spring-webflux-integration","advanced-dropwizard-integration"]}')},AMUl:function(e){e.exports=JSON.parse('{"data":{"allMdx":{"nodes":[{"tableOfContents":{"items":[{"url":"#requestcontext-custom-attributes","title":"RequestContext custom attributes"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-custom-attributes"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-dropwizard","title":"Using Armeria with Dropwizard"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-dropwizard-integration"}},{"tableOfContents":{"items":[{"url":"#production-checklist","title":"Production checklist"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-production-checklist"}},{"tableOfContents":{"items":[{"url":"#logging-contextual-information","title":"Logging contextual information"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-logging"}},{"tableOfContents":{"items":[{"url":"#saml-single-sign-on","title":"SAML Single Sign-On"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-saml"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-spring-webflux","title":"Using Armeria with Spring WebFlux"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-spring-webflux-integration"}},{"tableOfContents":{"items":[{"url":"#structured-logging","title":"Structured logging"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging"}},{"tableOfContents":{"items":[{"url":"#unit-testing-client-and-service","title":"Unit-testing Client and Service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-unit-testing"}},{"tableOfContents":{"items":[{"url":"#zipkin-integration","title":"Zipkin integration"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zipkin"}},{"tableOfContents":{"items":[{"url":"#service-discovery-with-zookeeper","title":"Service discovery with ZooKeeper"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zookeeper"}},{"tableOfContents":{"items":[{"url":"#structured-logging-with-kafka","title":"Structured logging with Kafka"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging-kafka"}},{"tableOfContents":{"items":[{"url":"#sending-custom-http-headers","title":"Sending custom HTTP headers"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-custom-http-headers"}},{"tableOfContents":{"items":[{"url":"#decorating-a-client","title":"Decorating a client"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-decorator"}},{"tableOfContents":{"items":[{"url":"#circuit-breaker","title":"Circuit breaker"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-circuit-breaker"}},{"tableOfContents":{"items":[{"url":"#calling-a-grpc-service","title":"Calling a gRPC service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-grpc"}},{"tableOfContents":{"items":[{"url":"#retrofit-integration","title":"Retrofit integration"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retrofit"}},{"tableOfContents":{"items":[{"url":"#calling-an-http-service","title":"Calling an HTTP service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-http"}},{"tableOfContents":{"items":[{"url":"#automatic-retry","title":"Automatic retry"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retry"}},{"tableOfContents":{"items":[{"url":"#client-side-load-balancing-and-service-discovery","title":"Client-side load balancing and service discovery"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-service-discovery"}},{"tableOfContents":{"items":[{"url":"#calling-a-thrift-service","title":"Calling a Thrift service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-thrift"}},{"tableOfContents":{"items":[{"url":"#overriding-client-timeouts","title":"Overriding client timeouts"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-timeouts"}},{"tableOfContents":{"items":[{"url":"#writing-an-access-log","title":"Writing an access log"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-access-log"}},{"tableOfContents":{"items":[{"url":"#user-manual","title":"User manual"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"index"}},{"tableOfContents":{"items":[{"url":"#annotated-services","title":"Annotated services"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-annotated-service"}},{"tableOfContents":{"items":[{"url":"#server-basics","title":"Server basics"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-basics"}},{"tableOfContents":{"items":[{"url":"#configuring-cors","title":"Configuring CORS"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-cors"}},{"tableOfContents":{"items":[{"url":"#decorating-a-service","title":"Decorating a service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-decorator"}},{"tableOfContents":{"items":[{"url":"#browsing-and-invoking-services-with-docservice","title":"Browsing and invoking services with DocService"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-docservice"}},{"tableOfContents":{"items":[{"url":"#running-a-grpc-service","title":"Running a gRPC service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-grpc"}},{"tableOfContents":{"items":[{"url":"#serving-static-files","title":"Serving static files"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-http-file"}},{"tableOfContents":{"items":[{"url":"#embedding-a-servlet-container","title":"Embedding a servlet container"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-servlet"}},{"tableOfContents":{"items":[{"url":"#serving-server-sent-events","title":"Serving Server-Sent Events"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-sse"}},{"tableOfContents":{"items":[{"url":"#running-a-thrift-service","title":"Running a Thrift service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-thrift"}},{"tableOfContents":{"items":[{"url":"#setting-up-a-project","title":"Setting up a project"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"setup"}}]}}}')},"YmR+":function(e,t,n){"use strict";n.r(t),n.d(t,"pageTitle",(function(){return s})),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return d}));n("8x/H"),n("UsjJ"),n("tKM+"),n("q1tI");var r=n("7ljp"),a=n("xCMr"),i=n("aRgT");var s="Using Armeria with Spring WebFlux",o={},c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(r.b)("div",t)}},l=c("Tip"),p=c("CodeBlock"),m={pageTitle:s,_frontmatter:o},u=a.a;function d(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(r.b)(u,Object.assign({},m,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"using-armeria-with-spring-webflux",style:{position:"relative"}},Object(r.b)("a",Object.assign({parentName:"h1"},{href:"#using-armeria-with-spring-webflux","aria-label":"using armeria with spring webflux permalink",className:"anchor before"}),Object(r.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(r.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Using Armeria with Spring WebFlux"),Object(r.b)(l,{mdxType:"Tip"},Object(r.b)("p",null,"Visit ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/line/armeria-examples"}),"armeria-examples")," to find a fully working example.")),Object(r.b)("p",null,"Spring framework provides powerful features which are necessary for building a web application, such as\ndependency injection, data binding, AOP, transaction, etc. In addition, if your Spring application integrates\nwith Armeria, you can leverage the following:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Rich support for Apache ",Object(r.b)("a",Object.assign({parentName:"li"},{href:"https://thrift.apache.org/"}),"Thrift")," and ",Object(r.b)("a",Object.assign({parentName:"li"},{href:"https://grpc.io/"}),"gRPC"),",\nincluding ",Object(r.b)("a",Object.assign({parentName:"li"},{href:"/docs/server-docservice"}),"the fancy web console")," that enables you to send Thrift and gRPC requests\nfrom a web browser"),Object(r.b)("li",{parentName:"ul"},"Ability to run HTTP REST service and RPC service in the same port"),Object(r.b)("li",{parentName:"ul"},"Full HTTP/2 support for both server-side and client-side, including ",Object(r.b)("inlineCode",{parentName:"li"},"h2c")," (plaintext HTTP/2)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object.assign({parentName:"li"},{href:"https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt"}),"PROXY protocol")," support which provides\ninteroperability with load balancers such as ",Object(r.b)("a",Object.assign({parentName:"li"},{href:"https://www.haproxy.org/"}),"HAProxy")," and\n",Object(r.b)("a",Object.assign({parentName:"li"},{href:"https://aws.amazon.com/elasticloadbalancing/"}),"AWS ELB"))),Object(r.b)("p",null,"Armeria can be plugged in as the underlying HTTP server for a Spring WebFlux application by adding\nthe following dependency:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"For Maven:"),Object(r.b)(p,{language:"xml",mdxType:"CodeBlock"},"\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>com.linecorp.armeria</groupId>\n      <artifactId>armeria-bom</artifactId>\n      <version>"+i["com.linecorp.armeria:armeria-bom"]+"</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.netty</groupId>\n      <artifactId>netty-bom</artifactId>\n      <version>"+i["io.netty:netty-bom"]+"</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n\n<dependency>\n    <groupId>com.linecorp.armeria</groupId>\n    <artifactId>armeria-spring-boot-webflux-starter</artifactId>\n</dependency>\n")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"For Gradle:"),Object(r.b)(p,{language:"groovy",mdxType:"CodeBlock"},'\nplugins {\n    id "org.springframework.boot" version "'+i["org.springframework.boot:spring-boot-starter"]+"\"\n}\n\ndependencyManagement {\n    imports {\n        mavenBom '"+i["com.linecorp.armeria:armeria-bom"]+"'\n        mavenBom '"+i["io.netty:netty-bom"]+"'\n    }\n}\n\ndependencies {\n    compile 'com.linecorp.armeria:armeria-spring-boot-webflux-starter'\n}\n"))),Object(r.b)("p",null,"The above starter configures Armeria as the HTTP server for WebFlux to run on by referring to ",Object(r.b)("inlineCode",{parentName:"p"},"application.yml"),"\nwhen the application starts up. A user can customize the server configuration with the same properties\nprovided by Spring Boot as for other servers supported with WebFlux such as Tomcat or Reactor Netty.\nThe following is a simple example for configuring the server:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-yaml"}),"server:\n  address: 127.0.0.1\n  port: 8080\n")),Object(r.b)("p",null,"For a user who wants to customize the web server, ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"type://ArmeriaServerConfigurator:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/spring/ArmeriaServerConfigurator.html"}),"type://ArmeriaServerConfigurator")," is provided.\nThe user can customize the server by defining a bean of the type in the configuration as follows:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'@Configuration\npublic class ArmeriaConfiguration {\n    // A user can configure the server by providing an ArmeriaServerConfigurator bean.\n    @Bean\n    public ArmeriaServerConfigurator armeriaServerConfigurator() {\n        // Customize the server using the given ServerBuilder. For example:\n        return builder -> {\n            // Add DocService that enables you to send Thrift and gRPC requests\n            // from web browser.\n            builder.serviceUnder("/docs", new DocService());\n\n            // Log every message which the server receives and responds.\n            builder.decorator(LoggingService.newDecorator());\n\n            // Write access log after completing a request.\n            builder.accessLogWriter(AccessLogWriter.combined(), false);\n\n            // You can also bind asynchronous RPC services such as Thrift and gRPC:\n            // builder.service(THttpService.of(...));\n            // builder.service(GrpcService.builder()...build());\n        };\n    }\n}\n')),Object(r.b)("p",null,"Armeria can also be plugged as the underlying HTTP client for the Spring ",Object(r.b)("inlineCode",{parentName:"p"},"WebClient"),". To customize\nclient settings for the Armeria HTTP client, simply define an ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"type://ArmeriaClientConfigurator:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/spring/web/reactive/ArmeriaClientConfigurator.html"}),"type://ArmeriaClientConfigurator")," bean\nin your configuration as follows:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"@Configuration\npublic class ArmeriaConfiguration {\n    // Returns a custom ClientFactory with TLS certificate validation disabled,\n    // which means any certificate received from the server will be accepted\n    // without any verification. It is used for an example which makes the client\n    // send an HTTPS request to the server running on localhost with a self-signed\n    // certificate. Do NOT use ClientFactory.insecure() or\n    // ClientFactoryBuilder.tlsNoVerify() in production.\n    @Bean\n    public ClientFactory clientFactory() {\n        return ClientFactory.insecure();\n    }\n\n    // A user can configure a Client by providing an ArmeriaClientConfigurator bean.\n    @Bean\n    public ArmeriaClientConfigurator\n            armeriaClientConfigurator(ClientFactory clientFactory) {\n\n        // Customize the client using the given WebClientBuilder. For example:\n        return builder -> {\n            // Use a circuit breaker for each remote host.\n            final CircuitBreakerStrategy strategy =\n                    CircuitBreakerStrategy.onServerErrorStatus();\n            builder.decorator(CircuitBreakerClient.builder(strategy)\n                                                  .newDecorator());\n\n            // Set a custom client factory.\n            builder.factory(clientFactory);\n        };\n    }\n}\n")),Object(r.b)(l,{mdxType:"Tip"},Object(r.b)("p",null,"If you are not familiar with Spring Boot and Spring WebFlux, please refer to\n",Object(r.b)("a",Object.assign({parentName:"p"},{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/"}),"Spring Boot Reference Guide")," and\n",Object(r.b)("a",Object.assign({parentName:"p"},{href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html"}),"Web on Reactive Stack"),".")))}d.isMDXComponent=!0},xCMr:function(e,t,n){"use strict";n("UsjJ");var r=n("AMUl"),a=n("q1tI"),i=n.n(a),s=n("/94A"),o=n("+ejy");t.a=function(e){var t=r.data.allMdx.nodes;return i.a.createElement(o.a,Object.assign({},e,{candidateMdxNodes:t,index:s,prefix:"docs",pageTitleSuffix:"Armeria documentation"}))}}}]);
//# sourceMappingURL=component---src-pages-docs-advanced-spring-webflux-integration-mdx-5c1d4b1e829701555eca.js.map