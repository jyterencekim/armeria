(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"/94A":function(e){e.exports=JSON.parse('{"root":["index","setup"],"References":{"Community articles":"/community/articles","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"Server":["server-basics","server-decorator","server-grpc","server-thrift","server-docservice","server-annotated-service","server-http-file","server-servlet","server-access-log","server-cors","server-sse"],"Client":["client-http","client-thrift","client-grpc","client-decorator","client-retrofit","client-custom-http-headers","client-timeouts","client-retry","client-circuit-breaker","client-service-discovery"],"Advanced":["advanced-logging","advanced-structured-logging","advanced-custom-attributes","advanced-structured-logging-kafka","advanced-unit-testing","advanced-production-checklist","advanced-zipkin","advanced-zookeeper","advanced-saml","advanced-spring-webflux-integration","advanced-dropwizard-integration"]}')},AMUl:function(e){e.exports=JSON.parse('{"data":{"allMdx":{"nodes":[{"tableOfContents":{"items":[{"url":"#requestcontext-custom-attributes","title":"RequestContext custom attributes"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-custom-attributes"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-dropwizard","title":"Using Armeria with Dropwizard"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-dropwizard-integration"}},{"tableOfContents":{"items":[{"url":"#production-checklist","title":"Production checklist"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-production-checklist"}},{"tableOfContents":{"items":[{"url":"#logging-contextual-information","title":"Logging contextual information"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-logging"}},{"tableOfContents":{"items":[{"url":"#saml-single-sign-on","title":"SAML Single Sign-On"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-saml"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-spring-webflux","title":"Using Armeria with Spring WebFlux"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-spring-webflux-integration"}},{"tableOfContents":{"items":[{"url":"#structured-logging","title":"Structured logging"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging"}},{"tableOfContents":{"items":[{"url":"#unit-testing-client-and-service","title":"Unit-testing Client and Service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-unit-testing"}},{"tableOfContents":{"items":[{"url":"#zipkin-integration","title":"Zipkin integration"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zipkin"}},{"tableOfContents":{"items":[{"url":"#service-discovery-with-zookeeper","title":"Service discovery with ZooKeeper"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zookeeper"}},{"tableOfContents":{"items":[{"url":"#structured-logging-with-kafka","title":"Structured logging with Kafka"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging-kafka"}},{"tableOfContents":{"items":[{"url":"#sending-custom-http-headers","title":"Sending custom HTTP headers"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-custom-http-headers"}},{"tableOfContents":{"items":[{"url":"#decorating-a-client","title":"Decorating a client"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-decorator"}},{"tableOfContents":{"items":[{"url":"#circuit-breaker","title":"Circuit breaker"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-circuit-breaker"}},{"tableOfContents":{"items":[{"url":"#calling-a-grpc-service","title":"Calling a gRPC service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-grpc"}},{"tableOfContents":{"items":[{"url":"#retrofit-integration","title":"Retrofit integration"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retrofit"}},{"tableOfContents":{"items":[{"url":"#calling-an-http-service","title":"Calling an HTTP service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-http"}},{"tableOfContents":{"items":[{"url":"#automatic-retry","title":"Automatic retry"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retry"}},{"tableOfContents":{"items":[{"url":"#client-side-load-balancing-and-service-discovery","title":"Client-side load balancing and service discovery"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-service-discovery"}},{"tableOfContents":{"items":[{"url":"#calling-a-thrift-service","title":"Calling a Thrift service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-thrift"}},{"tableOfContents":{"items":[{"url":"#overriding-client-timeouts","title":"Overriding client timeouts"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-timeouts"}},{"tableOfContents":{"items":[{"url":"#writing-an-access-log","title":"Writing an access log"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-access-log"}},{"tableOfContents":{"items":[{"url":"#user-manual","title":"User manual"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"index"}},{"tableOfContents":{"items":[{"url":"#annotated-services","title":"Annotated services"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-annotated-service"}},{"tableOfContents":{"items":[{"url":"#server-basics","title":"Server basics"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-basics"}},{"tableOfContents":{"items":[{"url":"#configuring-cors","title":"Configuring CORS"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-cors"}},{"tableOfContents":{"items":[{"url":"#decorating-a-service","title":"Decorating a service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-decorator"}},{"tableOfContents":{"items":[{"url":"#browsing-and-invoking-services-with-docservice","title":"Browsing and invoking services with DocService"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-docservice"}},{"tableOfContents":{"items":[{"url":"#running-a-grpc-service","title":"Running a gRPC service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-grpc"}},{"tableOfContents":{"items":[{"url":"#serving-static-files","title":"Serving static files"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-http-file"}},{"tableOfContents":{"items":[{"url":"#embedding-a-servlet-container","title":"Embedding a servlet container"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-servlet"}},{"tableOfContents":{"items":[{"url":"#serving-server-sent-events","title":"Serving Server-Sent Events"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-sse"}},{"tableOfContents":{"items":[{"url":"#running-a-thrift-service","title":"Running a Thrift service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-thrift"}},{"tableOfContents":{"items":[{"url":"#setting-up-a-project","title":"Setting up a project"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"setup"}}]}}}')},qrcX:function(e,t,n){"use strict";n.r(t),n.d(t,"pageTitle",(function(){return i})),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return l}));n("8x/H"),n("UsjJ"),n("tKM+"),n("q1tI");var a=n("7ljp"),r=n("xCMr");var i="Unit-testing Client and Service",s={},c={pageTitle:i,_frontmatter:s},o=r.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(o,Object.assign({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"unit-testing-client-and-service",style:{position:"relative"}},Object(a.b)("a",Object.assign({parentName:"h1"},{href:"#unit-testing-client-and-service","aria-label":"unit testing client and service permalink",className:"anchor before"}),Object(a.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(a.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Unit-testing ",Object(a.b)("inlineCode",{parentName:"h1"},"Client")," and ",Object(a.b)("inlineCode",{parentName:"h1"},"Service")),Object(a.b)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"#using-a-fake-context-to-emulate-an-incoming-request"}),"Using a fake context to emulate an incoming request"))),Object(a.b)("p",null,"A unit test of a client or a service will require you to prepare two objects:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"type://ClientRequestContext:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ClientRequestContext.html"}),"type://ClientRequestContext")," or ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"type://ServiceRequestContext:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/ServiceRequestContext.html"}),"type://ServiceRequestContext")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"type://HttpRequest:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpRequest.html"}),"type://HttpRequest")," or ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"type://RpcRequest:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/RpcRequest.html"}),"type://RpcRequest"))),Object(a.b)("p",null,Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ClientRequestContext:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ClientRequestContext.html"}),"type://ClientRequestContext")," or ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ServiceRequestContext:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/ServiceRequestContext.html"}),"type://ServiceRequestContext")," is a more complex object with many properties than\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://HttpRequest:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/HttpRequest.html"}),"type://HttpRequest")," or ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://RpcRequest:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/RpcRequest.html"}),"type://RpcRequest"),", and thus Armeria provides the API dedicated to building a fake context\nobject easily:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import org.junit.Before;\nimport org.junit.Test;\n\nimport com.linecorp.armeria.common.HttpRequest;\nimport com.linecorp.armeria.common.HttpResponse;\nimport com.linecorp.armeria.common.AggregatedHttpResponse;\nimport com.linecorp.armeria.client.ClientRequestContext;\nimport com.linecorp.armeria.server.ServiceRequestContext;\n\npublic class MyJUnit4Test {\n\n    private MyClient client;\n    private MyService service;\n\n    @Before\n    public void setUp() {\n        client = ...;\n        service = ...;\n    }\n\n    @Test\n    public void testClient() throws Exception {\n        // Given\n        HttpRequest req = HttpRequest.of(HttpMethod.GET, "/greet?name=foo");\n        ClientRequestContext cctx = ClientRequestContext.of(req);\n\n        // When\n        HttpResponse res = client.execute(cctx, req);\n\n        // Then\n        AggregatedHttpResponse aggregatedRes = res.aggregate().get();\n        assertEquals(200, aggregatedRes.status().code());\n    }\n\n    @Test\n    public void testService() throws Exception {\n        // Given\n        HttpRequest req = HttpRequest.of(HttpMethod.POST, "/greet",\n                                         MediaType.JSON_UTF_8,\n                                         "{ \\"name\\": \\"foo\\" }");\n        ServiceRequestContext sctx = ServiceRequestContext.of(req);\n\n        // When\n        HttpResponse res = service.serve(sctx, req);\n\n        // Then\n        AggregatedHttpResponse aggregatedRes = res.aggregate().get();\n        assertEquals(200, aggregatedRes.status().code());\n    }\n}\n')),Object(a.b)("p",null,"Although the fake context returned by ",Object(a.b)("inlineCode",{parentName:"p"},"ClientRequestContext.of()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"ServiceRequestContext.of()")," will\nprovide sensible defaults, you can override its default properties using a builder:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.util.Map;\n\nimport com.linecorp.armeria.common.SessionProtocol;\nimport com.linecorp.armeria.client.ClientRequestContext;\nimport com.linecorp.armeria.server.RoutingResult;\nimport com.linecorp.armeria.server.ServiceRequestContext;\n\nHttpRequest req = HttpRequest.of(...);\n\nClientRequestContext cctx =\n        ClientRequestContext.builder(req)\n                            .sessionProtocol(SessionProtocol.H1C)\n                            .remoteAddress(new InetSocketAddress("192.168.0.2", 443))\n                            .build();\n\nRoutingResult routingResult =\n        RoutingResult.builder()\n                     .path("/mapped/path")                       // Mapped path\n                     .query("foo=bar&baz=qux")                   // Query string\n                     .pathParams(Map.of("pathParam1", "value1",  // Path parameters\n                                        "pathParam2", "value2"))\n                     .build();\n\nServiceRequestContext sctx =\n        ServiceRequestContext.builder(req)\n                             .clientAddress(InetAddress.getByName("192.168.1.2"))\n                             .routingResult(routingResult);\n                             .build();\n')),Object(a.b)("h2",{id:"using-a-fake-context-to-emulate-an-incoming-request",style:{position:"relative"}},Object(a.b)("a",Object.assign({parentName:"h2"},{href:"#using-a-fake-context-to-emulate-an-incoming-request","aria-label":"using a fake context to emulate an incoming request permalink",className:"anchor before"}),Object(a.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(a.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Using a fake context to emulate an incoming request"),Object(a.b)("p",null,"It is usually not necessary to build a context object by yourself except when writing a unit test,\nbecause Armeria will always create a context object for you. However, you may need to build a fake context and\ninvoke your request processing pipeline with it when you want to handle the requests received via other sources\nsuch as:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Non-Armeria services"),Object(a.b)("li",{parentName:"ul"},"Non-HTTP protocols, e.g. Kafka and STOMP"),Object(a.b)("li",{parentName:"ul"},"Timers, i.e. Trigger a certain request every N minutes.")),Object(a.b)("p",null,"The following example shows how to emit a fake request every minute:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\nimport com.linecorp.armeria.server.HttpService;\n\nScheduledExecutorService executor = ...;\nHttpService sessionManagementService = (ctx, req) -> ...;\n\n// Send a session expiration request to the session management service\n// every minute.\nexecutor.scheduleWithFixedDelay(() -> {\n    HttpRequest req = HttpRequest.of(HttpMethod.POST, "/expire_stall_sessions");\n    ServiceRequestContext ctx = ServiceRequestContext.of(req);\n    try {\n        HttpResponse res = sessionManagementService.servce(ctx, req);\n        AggregatedHttpResponse aggregatedRes = res.aggregate().get();\n        if (aggregatedRes.status().code() != 200) {\n            System.err.println("Failed to expire stall sessions: " +\n                               aggregatedRes);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}, 1, 1, TimeUnit.MINUTES);\n')))}l.isMDXComponent=!0},xCMr:function(e,t,n){"use strict";n("UsjJ");var a=n("AMUl"),r=n("q1tI"),i=n.n(r),s=n("/94A"),c=n("+ejy");t.a=function(e){var t=a.data.allMdx.nodes;return i.a.createElement(c.a,Object.assign({},e,{candidateMdxNodes:t,index:s,prefix:"docs",pageTitleSuffix:"Armeria documentation"}))}}}]);
//# sourceMappingURL=component---src-pages-docs-advanced-unit-testing-mdx-6748e8e0688b76b8e827.js.map