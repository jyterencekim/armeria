(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{"/94A":function(e){e.exports=JSON.parse('{"root":["index","setup"],"References":{"Community articles":"/community/articles","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"Server":["server-basics","server-decorator","server-grpc","server-thrift","server-docservice","server-annotated-service","server-http-file","server-servlet","server-access-log","server-cors","server-sse"],"Client":["client-http","client-thrift","client-grpc","client-decorator","client-retrofit","client-custom-http-headers","client-timeouts","client-retry","client-circuit-breaker","client-service-discovery"],"Advanced":["advanced-logging","advanced-structured-logging","advanced-custom-attributes","advanced-structured-logging-kafka","advanced-unit-testing","advanced-production-checklist","advanced-zipkin","advanced-zookeeper","advanced-saml","advanced-spring-webflux-integration","advanced-dropwizard-integration"]}')},AMUl:function(e){e.exports=JSON.parse('{"data":{"allMdx":{"nodes":[{"tableOfContents":{"items":[{"url":"#requestcontext-custom-attributes","title":"RequestContext custom attributes"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-custom-attributes"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-dropwizard","title":"Using Armeria with Dropwizard"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-dropwizard-integration"}},{"tableOfContents":{"items":[{"url":"#production-checklist","title":"Production checklist"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-production-checklist"}},{"tableOfContents":{"items":[{"url":"#logging-contextual-information","title":"Logging contextual information"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-logging"}},{"tableOfContents":{"items":[{"url":"#saml-single-sign-on","title":"SAML Single Sign-On"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-saml"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-spring-webflux","title":"Using Armeria with Spring WebFlux"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-spring-webflux-integration"}},{"tableOfContents":{"items":[{"url":"#structured-logging","title":"Structured logging"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging"}},{"tableOfContents":{"items":[{"url":"#unit-testing-client-and-service","title":"Unit-testing Client and Service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-unit-testing"}},{"tableOfContents":{"items":[{"url":"#zipkin-integration","title":"Zipkin integration"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zipkin"}},{"tableOfContents":{"items":[{"url":"#service-discovery-with-zookeeper","title":"Service discovery with ZooKeeper"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zookeeper"}},{"tableOfContents":{"items":[{"url":"#structured-logging-with-kafka","title":"Structured logging with Kafka"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging-kafka"}},{"tableOfContents":{"items":[{"url":"#sending-custom-http-headers","title":"Sending custom HTTP headers"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-custom-http-headers"}},{"tableOfContents":{"items":[{"url":"#decorating-a-client","title":"Decorating a client"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-decorator"}},{"tableOfContents":{"items":[{"url":"#circuit-breaker","title":"Circuit breaker"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-circuit-breaker"}},{"tableOfContents":{"items":[{"url":"#calling-a-grpc-service","title":"Calling a gRPC service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-grpc"}},{"tableOfContents":{"items":[{"url":"#retrofit-integration","title":"Retrofit integration"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retrofit"}},{"tableOfContents":{"items":[{"url":"#calling-an-http-service","title":"Calling an HTTP service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-http"}},{"tableOfContents":{"items":[{"url":"#automatic-retry","title":"Automatic retry"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retry"}},{"tableOfContents":{"items":[{"url":"#client-side-load-balancing-and-service-discovery","title":"Client-side load balancing and service discovery"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-service-discovery"}},{"tableOfContents":{"items":[{"url":"#calling-a-thrift-service","title":"Calling a Thrift service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-thrift"}},{"tableOfContents":{"items":[{"url":"#overriding-client-timeouts","title":"Overriding client timeouts"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-timeouts"}},{"tableOfContents":{"items":[{"url":"#writing-an-access-log","title":"Writing an access log"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-access-log"}},{"tableOfContents":{"items":[{"url":"#user-manual","title":"User manual"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"index"}},{"tableOfContents":{"items":[{"url":"#annotated-services","title":"Annotated services"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-annotated-service"}},{"tableOfContents":{"items":[{"url":"#server-basics","title":"Server basics"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-basics"}},{"tableOfContents":{"items":[{"url":"#configuring-cors","title":"Configuring CORS"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-cors"}},{"tableOfContents":{"items":[{"url":"#decorating-a-service","title":"Decorating a service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-decorator"}},{"tableOfContents":{"items":[{"url":"#browsing-and-invoking-services-with-docservice","title":"Browsing and invoking services with DocService"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-docservice"}},{"tableOfContents":{"items":[{"url":"#running-a-grpc-service","title":"Running a gRPC service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-grpc"}},{"tableOfContents":{"items":[{"url":"#serving-static-files","title":"Serving static files"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-http-file"}},{"tableOfContents":{"items":[{"url":"#embedding-a-servlet-container","title":"Embedding a servlet container"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-servlet"}},{"tableOfContents":{"items":[{"url":"#serving-server-sent-events","title":"Serving Server-Sent Events"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-sse"}},{"tableOfContents":{"items":[{"url":"#running-a-thrift-service","title":"Running a Thrift service"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-thrift"}},{"tableOfContents":{"items":[{"url":"#setting-up-a-project","title":"Setting up a project"}]},"parent":{"__typename":"File","sourceInstanceName":"docs","name":"setup"}}]}}}')},eDff:function(e,t,r){"use strict";r.r(t),r.d(t,"pageTitle",(function(){return o})),r.d(t,"_frontmatter",(function(){return i})),r.d(t,"default",(function(){return p}));r("8x/H"),r("UsjJ"),r("tKM+"),r("q1tI");var a=r("7ljp"),n=r("xCMr");var o="Service discovery with ZooKeeper",i={},c={pageTitle:o,_frontmatter:i},s=n.a;function p(e){var t=e.components,r=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,["components"]);return Object(a.b)(s,Object.assign({},c,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"service-discovery-with-zookeeper",style:{position:"relative"}},Object(a.b)("a",Object.assign({parentName:"h1"},{href:"#service-discovery-with-zookeeper","aria-label":"service discovery with zookeeper permalink",className:"anchor before"}),Object(a.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(a.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Service discovery with ZooKeeper"),Object(a.b)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"#automatic-service-registration"}),"Automatic service registration")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object.assign({parentName:"li"},{href:"#service-discovery"}),"Service discovery"))),Object(a.b)("h2",{id:"automatic-service-registration",style:{position:"relative"}},Object(a.b)("a",Object.assign({parentName:"h2"},{href:"#automatic-service-registration","aria-label":"automatic service registration permalink",className:"anchor before"}),Object(a.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(a.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Automatic service registration"),Object(a.b)("p",null,"Use ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperUpdatingListener:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.html"}),"type://ZooKeeperUpdatingListener")," and ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperRegistrationSpec:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationSpec.html"}),"type://ZooKeeperRegistrationSpec")," to register your server\nto a ZooKeeper cluster:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import com.linecorp.armeria.server.Server;\nimport com.linecorp.armeria.server.zookeeper.ZooKeeperRegistrationSpec;\nimport com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListener;\n\nString zkConnectionStr = "myZooKeeperHost:2181";\nString znodePath = "/myProductionEndpoints";\nString serviceName = "catalog";\nZooKeeperRegistrationSpec registrationSpec =\n        ZooKeeperRegistrationSpec.curator(serviceName);\nZooKeeperUpdatingListener listener =\n        ZooKeeperUpdatingListener.builder(zkConnectionStr, znodePath, registrationSpec)\n                                 .sessionTimeoutMillis(10000)\n                                 .build();\nServer server = ...\nserver.addListener(listener);\nserver.start();\n')),Object(a.b)("p",null,"The ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperRegistrationSpec:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationSpec.html"}),"type://ZooKeeperRegistrationSpec")," is used to convert the information of your server to a binary\nrepresentation. The ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperUpdatingListener:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.html"}),"type://ZooKeeperUpdatingListener")," registers the binary representation to the specified\nznode as a member of the cluster when your server starts up. Each server will represent itself as\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://zookeeper.apache.org/doc/r3.4.10/zookeeperOver.html#Nodes+and+ephemeral+nodes"}),"an EPHEMERAL node"),",\nwhich means when a server stops or a network partition between your server and ZooKeeper cluster occurs,\nthe node of the server that became unreachable will be deleted automatically by ZooKeeper."),Object(a.b)("p",null,Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperRegistrationSpec#curator(String):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationSpec.html#curator(java.lang.String)"}),"type://ZooKeeperRegistrationSpec#curator(String)")," uses the format of\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://curator.apache.org/curator-x-discovery/index.html"}),"Curator Service Discovery")," which is compatible\nwith ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://cloud.spring.io/spring-cloud-zookeeper/reference/html/"}),"Spring Cloud Zookeeper"),".\nYou can use ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperRegistrationSpec#serverSets():https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationSpec.html#serverSets()"}),"type://ZooKeeperRegistrationSpec#serverSets()")," that applies the format of\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://twitter.github.io/finagle/docs/com/twitter/serverset.html"}),"Finagle ServerSets"),".\nIf you want to use your own format, you can implement the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperRegistrationSpec:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationSpec.html"}),"type://ZooKeeperRegistrationSpec"),"."),Object(a.b)("p",null,"In the example above, we used the ZooKeeper connection string(",Object(a.b)("inlineCode",{parentName:"p"},'"myZooKeeperHost:2181"'),") to connect to\nthe ZooKeeper cluster. Instead, you can use an existing\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://curator.apache.org/apidocs/org/apache/curator/framework/CuratorFramework.html"}),"CuratorFramework"),"\ninstance."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import org.apache.curator.framework.CuratorFramework;\n\nCuratorFramework client = ...\nString znodePath = ...\nZooKeeperRegistrationSpec registrationSpec = ...\nZooKeeperUpdatingListener listener =\n        ZooKeeperUpdatingListener.builder(client, znodePath, registrationSpec)\n                                 .build();\nServer server = ...\nserver.addListener(listener);\nserver.start();\n")),Object(a.b)("p",null,"For more information, please refer to the API documentation of the\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/zookeeper/package-summary.html"}),"com.linecorp.armeria.server.zookeeper")," package."),Object(a.b)("h2",{id:"service-discovery",style:{position:"relative"}},Object(a.b)("a",Object.assign({parentName:"h2"},{href:"#service-discovery","aria-label":"service discovery permalink",className:"anchor before"}),Object(a.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(a.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Service discovery"),Object(a.b)("p",null,"Use ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperEndpointGroup:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.html"}),"type://ZooKeeperEndpointGroup")," and ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperDiscoverySpec:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/zookeeper/ZooKeeperDiscoverySpec.html"}),"type://ZooKeeperDiscoverySpec")," to retrieve the information of servers:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import com.linecorp.armeria.client.zookeeper.ZooKeeperDiscoverySpec;\nimport com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup;\n\nString zkConnectionStr = "myZooKeeperHost:2181";\nString znodePath = "/myProductionEndpoints";\nZooKeeperDiscoverySpec discoverySpec = ZooKeeperDiscoverySpec.curator(serviceName);\nZooKeeperEndpointGroup myEndpointGroup =\n        ZooKeeperEndpointGroup.builder(zkConnectionStr, znodePath, discoverySpec)\n                              .sessionTimeoutMillis(10000)\n                              .build();\n')),Object(a.b)("p",null,"The ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperEndpointGroup:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.html"}),"type://ZooKeeperEndpointGroup")," is used to fetch the binary representation of server information.\nThe ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperDiscoverySpec:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/zookeeper/ZooKeeperDiscoverySpec.html"}),"type://ZooKeeperDiscoverySpec")," converts the binary representation to an ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://Endpoint:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/Endpoint.html"}),"type://Endpoint"),"."),Object(a.b)("p",null,Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperDiscoverySpec#curator(String):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/zookeeper/ZooKeeperDiscoverySpec.html#curator(java.lang.String)"}),"type://ZooKeeperDiscoverySpec#curator(String)")," uses the format of\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://curator.apache.org/curator-x-discovery/index.html"}),"Curator Service Discovery"),". If you registered your\nserver with ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperRegistrationSpec#curator(String):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationSpec.html#curator(java.lang.String)"}),"type://ZooKeeperRegistrationSpec#curator(String)"),", you must use\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperDiscoverySpec#curator(String):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/zookeeper/ZooKeeperDiscoverySpec.html#curator(java.lang.String)"}),"type://ZooKeeperDiscoverySpec#curator(String)"),"."),Object(a.b)("p",null,"You can use an existing\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://curator.apache.org/apidocs/org/apache/curator/framework/CuratorFramework.html"}),"CuratorFramework"),"\ninstance instead of the ZooKeeper connection string at this time as well."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import org.apache.curator.framework.CuratorFramework;\n\nCuratorFramework client = ...\nString znodePath = ...\nZooKeeperDiscoverySpec discoverySpec = ...\nZooKeeperEndpointGroup myEndpointGroup =\n        ZooKeeperEndpointGroup.builder(client, znodePath, discoverySpec)\n                              .build();\n")),Object(a.b)("p",null,"Now, you can specify the ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"type://ZooKeeperEndpointGroup:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.html"}),"type://ZooKeeperEndpointGroup")," when you build a client:"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import com.linecorp.armeria.common.SessionProtocol;\n\nWebClient webClient = WebClient.of(SessionProtocol.HTTP, myEndpointGroup, "/hello");\n')),Object(a.b)("p",null,"For more information, please refer to the API documentation of the\n",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/zookeeper/package-summary.html"}),"com.linecorp.armeria.server.zookeeper")," package."))}p.isMDXComponent=!0},xCMr:function(e,t,r){"use strict";r("UsjJ");var a=r("AMUl"),n=r("q1tI"),o=r.n(n),i=r("/94A"),c=r("+ejy");t.a=function(e){var t=a.data.allMdx.nodes;return o.a.createElement(c.a,Object.assign({},e,{candidateMdxNodes:t,index:i,prefix:"docs",pageTitleSuffix:"Armeria documentation"}))}}}]);
//# sourceMappingURL=component---src-pages-docs-advanced-zookeeper-mdx-134d937b46813c734124.js.map